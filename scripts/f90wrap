#!/usr/bin/env python
"""
# HF XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# HF X
# HF X   f90wrap: F90 to Python interface generator with derived type support
# HF X
# HF X   Copyright James Kermode 2011-2014
# HF X
# HF X   These portions of the source code are released under the GNU General
# HF X   Public License, version 2, http://www.gnu.org/copyleft/gpl.html
# HF X
# HF X   If you would like to license the source code under different terms,
# HF X   please contact James Kermode, james.kermode@gmail.com
# HF X
# HF X   When using this software, please cite the following reference:
# HF X
# HF X   http://www.jrkermode.co.uk/f90wrap
# HF X
# HF XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
"""

import sys
import os
import traceback
import copy
import logging
import pprint
import warnings


from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

from f90wrap import __version__

from f90wrap import parser as fparse
from f90wrap import fortran
from f90wrap.sizeof_fortran_t import sizeof_fortran_t
from f90wrap import transform as tf

from f90wrap import f90wrapgen as fwrap
from f90wrap import pywrapgen as pywrap

class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''
    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg
    def __str__(self):
        return self.msg
    def __unicode__(self):
        return self.msg

def main(argv=None):
    '''Parse and wrap Fortran90 code, including derived types.'''

    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % __version__
    program_version_message = '%%(prog)s %s' % program_version
    program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
    program_license = '''%s

   Copyright James Kermode 2011-2014

   These portions of the source code are released under the GNU General
   Public License, version 2, http://www.gnu.org/copyleft/gpl.html

   If you would like to license the source code under different terms,
   please contact James Kermode, james.kermode@gmail.com

   When using this software, please cite the following reference:

   http://www.jrkermode.co.uk/f90wrap

USAGE
''' % program_shortdesc

    try:
        # Setup argument parser
        parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
        parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)s]")
        parser.add_argument('-V', '--version', action='version', version=program_version_message)

        parser.add_argument("files", nargs="+", help="The files to include in the wrap")
        parser.add_argument('-p', '--prefix',
                            help="""Prefix to prepend to arguments and subroutines.""",
                            default='f90wrap_')
        parser.add_argument('-c', '--callback', nargs="*",
                            help="""Callback routines.""")
        parser.add_argument('-k', '--kind-map', 
                            help="""File containting Python dictionary in f2py_f2cmap format""")
        parser.add_argument('-i', '--init', nargs='*',
                            help="""Special initialisation lines used when constructing a particular type.""")
        parser.add_argument('-m', '--mod-name',
                            help="Name of output extension module (without .so extension).")
        parser.add_argument('-a', '--abort-func', default='f90wrap_error_abort',
                            help='Name of Fortran subroutine to invoke if a fatal error occurs')

        parser.add_argument("--only", nargs="*", default=[], help="Subroutines to include in wrapper")
        parser.add_argument("--skip", nargs="*", default=[], help="Subroutines to exclude from wrapper")

        args = parser.parse_args()

        if args.verbose:
            logging.root.setLevel(logging.DEBUG)
        else:
            logging.root.setLevel(logging.INFO)
        
        #=======================================================================
        # Begin actual wrapping
        #=======================================================================
        
        tree = fparse.read_files(args.files)

        init_lines = {}  # {'atoms': ('atoms_module', ('if (associated(%(PTR)s)) call atoms_repoint(%(PTR)s)',
        #                            'if (present(%(ARG)s)) call atoms_repoint(%(PTR)s)'))}        

        # ## TODO -- parse opt.callback, opt.init to populate these lists
        if not args.callback:
            callbacks = []
        else:
            callbacks = args.callback

        if args.kind_map:
            kind_map = eval(open(args.kind_map).read())
        else:
            kind_map = {}
        print 'Kind map: (also saved to .f2py_f2cmap)'
        pprint.pprint(kind_map)
        f2py_f2cmap = open('.f2py_f2cmap', 'w')
        pprint.pprint(kind_map, f2py_f2cmap)
        f2py_f2cmap.close()

        constructors = ('initialise_ptr', 'initialise', 'allocate')
        destructors = ('finalise',)
        short_names = {}

        string_lengths = {
            'key_len':256,
            'value_len':1024,
            'value_length':1023,
            'field_length':1023,
            'string_length':1023,
            'table_string_length':10,
            'dict_char_a_len': 10
        }
        default_string_length = 1024

        argument_name_map = {
            'this': 'self'
        }

        fsize = sizeof_fortran_t()
        
        types = fortran.find_types(tree)

        # Find all modules and subroutines the user wishes to keep
        kept_subs = []
        kept_mods = set()
        if args.only:
            for mod, sub, arg in fortran.walk_procedures(tree):
                if sub.name in args.only:
                    kept_subs.extend([sub])
                    if mod is not None:
                        kept_mods.add(mod)
        elif args.skip:
            for mod, sub, arg in fortran.walk_procedures(tree):
                if sub.name not in args.skip:
                    kept_subs.extend([sub])
                    if mod is not None:
                        kept_mods.add(mod)

        if len(kept_subs) == 0 and args.only:
            warnings.warn("None of the supplied procedures were found")

        # Find (recursively) all used modules
        kept_mods = tf.find_referenced_modules(kept_mods, tree)

        tree = tf.transform_to_generic_wrapper(tree, types, callbacks,
                                               constructors, destructors, short_names,
                                               init_lines, kept_subs, kept_mods)

        py_tree = copy.deepcopy(tree)
        f90_tree = copy.deepcopy(tree)

        py_tree = tf.transform_to_py_wrapper(py_tree, argument_name_map)

        f90_tree = tf.transform_to_f90_wrapper(f90_tree, types, 
                                               callbacks,
                                               constructors, destructors,
                                               short_names, init_lines,
                                               string_lengths,
                                               default_string_length,
                                               sizeof_fortran_t=fsize,
                                               kind_map=kind_map)

        pywrap.PythonWrapperGenerator(args.prefix, args.mod_name, types).visit(py_tree)
        fwrap.F90WrapperGenerator(args.prefix, fsize, string_lengths,
                                  args.abort_func, kind_map).visit(f90_tree)
        return 0

    except KeyboardInterrupt:
        ### handle keyboard interrupt ###
        return 0

    except Exception, e:
        traceback.print_exc()
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        if 'args' in locals() and args.verbose:
            raise
        else:
            return 2

if __name__ == "__main__":
    sys.exit(main())
